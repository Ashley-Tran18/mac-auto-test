# sự khác biệt giữa các framework
    # Framework là một bộ khung hoặc nền tảng phần mềm cung cấp sẵn các cấu trúc, thư viện, 
    # và quy tắc để phát triển ứng dụng nhanh chóng, hiệu quả và nhất quán hơn.

# framework thường bao gồm các thành phần như: 
    # env ảo: tạo ra một môi trường độc lập cho dự án, giúp quản lý các phụ thuộc và phiên bản dễ dàng hơn.
    # tests: login.py, dashboard.py, settings.py
    # pages: login.py, dashboard.py, settings.py
    # Github: _.yml -> excute 1 cách hiệu quả
    # reports: test_report.html, coverage_report.html
    # utils(tiện ích): read file, write file, API helper

# framework cung cấp:
# (called: standard guideline, theo tiêu chuẩn thế giới, basicly)
# (called: reusable components: các thành phần có thể tái sử dụng(gọi lại các hàm có sẵn), giúp tiết kiệm thời gian và công sức)
# best practices: các phương pháp tốt nhất, giúp đảm bảo mã nguồn sạch, dễ bảo trì và mở rộng. từ kn của những người đi trước


# Note:
# scratch: build từ ban đầu 

# framework architecture
# core(can be reuse): chứa các thành phần chính của framework: cung cấp các chức năng cơ bản và cần thiết để framework hoạt động.
# test(can't not be reuse, vì different cấu trúc giữa các trang): chứa testscript và run test
# CI/CD:

# core bổ trợ cho test, ko có core, ko có data để test

# các loại của auto test framework:
    # Linear framework:
        # - Tập trung vào việc thực hiện các bước kiểm thử theo trình tự tuyến tính,
        #   thường được sử dụng cho các ứng dụng nhỏ hoặc đơn giản.
        # - Mỗi bước kiểm thử được thực hiện một cách tuần tự, không có khả năng tái sử dụng hoặc cấu trúc phức tạp.
        # - Thích hợp cho các dự án nhỏ hoặc khi cần kiểm thử nhanh chóng mà không cần cấu trúc phức tạp.

    # Data-driven framework:
        # - Tách biệt dữ liệu kiểm thử khỏi mã kiểm thử, cho phép sử dụng cùng một mã kiểm thử với nhiều bộ dữ liệu khác nhau.
        # - Dữ liệu kiểm thử được lưu trữ trong các tệp dữ liệu (như CSV, Excel, hoặc cơ sở dữ liệu),
        #   và mã kiểm thử sẽ đọc dữ liệu này để thực hiện các bước kiểm thử.
        # - Giúp tăng tính linh hoạt và khả năng mở rộng của kiểm thử, cho phép kiểm thử nhiều trường hợp khác nhau mà không cần thay đổi mã kiểm thử.
        # - Thích hợp cho các ứng dụng có nhiều biến thể dữ liệu hoặc khi cần kiểm thử với nhiều bộ dữ liệu khác nhau.
        # - Ex: 1 script sẽ ra kết quả khác nhau dựa trên dữ liệu đầu vào.

    # Keyword-driven framework:
        # - Sử dụng các từ khóa để mô tả các hành động kiểm thử,
        #   cho phép người dùng không cần phải viết mã kiểm thử mà vẫn có thể thực hiện kiểm thử.
        # - Các từ khóa thường được định nghĩa trong một tệp riêng biệt
        #   và có thể được sử dụng để thực hiện các hành động kiểm thử cụ thể
        # - Thích hợp cho các nhóm kiểm thử không có kỹ năng lập trình cao hoặc khi cần tạo ra các kịch bản kiểm thử dễ hiểu và dễ bảo trì.
        # - Ex: Selenium IDE, Robot Framework.

    # Hybrid framework:
        # - Kết hợp các yếu tố của các loại framework khác nhau, thường là giữa
        #   data-driven và keyword-driven framework.
        # - Cho phép sử dụng các từ khóa để mô tả các hành động kiểm thử
        #   trong khi vẫn có thể sử dụng dữ liệu kiểm thử từ các tệp dữ liệu.
        # - Cung cấp tính linh hoạt cao và khả năng mở rộng, cho phép
        #   người dùng tùy chỉnh kiểm thử theo nhu cầu cụ thể của dự án. 

# Benifit of using framework:
# - Tăng tính tái sử dụng: Các thành phần và mã kiểm thử có thể được tái sử dụng trong nhiều dự án khác nhau, giúp tiết kiệm thời gian và côngsức.
# - Cải thiện khả năng bảo trì: Mã kiểm thử được tổ chức và cấu trúc rõ ràng, giúp dễ dàng bảo trì và cập nhật khi cần thiết.
# - Tăng tính nhất quán: Các quy tắc và cấu trúc của framework giúp đảm bảo rằng mã kiểm thử được viết theo cách nhất quán, dễ hiểu và dễ theo dõi.
# - Hỗ trợ cộng tác: Các thành viên trong nhóm có thể dễ dàng hiểu và làm việc với mã kiểm thử của nhau, giúp cải thiện hiệu suất làm việc nhóm.